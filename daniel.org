#+TITLE: Emacs Configuration File
#+STARTUP: content

* Configuration

Essentially this file takes the place of my original =init.el= file. That file is now only
used to load /this/ file, via =org-babel-load-file=.

** Setup

*** Add package sources

Most packages we use are on melpa:

#+begin_src emacs-lisp
;; add the repos
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))

(package-initialize)
#+end_src

** Custom Packages

*** Setup

Let's use use-package!

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

;; automatically install packages
(setq use-package-always-ensure t)
#+end_src

Just in case we're from the past, let's prefer UTF-8 before we do anything else.

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

*** Install

With =use-package=, we can easily and cleanly organise and configure plugins. First a few packages
that require no configuration:

#+begin_src emacs-lisp
(use-package flymake)
#+end_src

**** Basic

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :diminish git-gutter-mode
  :config (global-git-gutter-mode 1))

(use-package which-key
  :diminish which-key-mode
  :config (which-key-mode))

(use-package company
  :ensure t
  :init (add-hook 'after-init-hook 'global-company-mode))

(use-package lua-mode
  :mode "\\.lua\\'")

(use-package kivy-mode)

(use-package fuel
  :disabled t ; seemingly not on repos atm
  :init (setq fuel-listener-factor-binary "/home/user/bin/factor/factor"
              fuel-listener-factor-image "/home/user/bin/factor/factor.image"))

(use-package magit
  :ensure t
  :config (global-set-key (kbd "C-x g") 'magit-status))
#+end_src

**** Webdev

#+begin_src emacs-lisp
(use-package web-mode
  :mode "\\.html\\'")

;; nice js completion
;; make sure you install tern via npm (npm install -g tern)
(use-package tern
  :config (when (file-exists-p "/usr/bin/tern")
              (add-hook 'js2-mode-hook (lambda () (tern-mode 1)))))

(use-package js2-mode
  :mode "\\.js\\'"
  :init (setq js2-highlight-level 3)
  :config (setq tab-width 4))

(use-package js2-refactor
  :config (progn
            (add-hook 'js2-mode-hook #'js2-refactor-mode)
            (js2r-add-keybindings-with-prefix "C-c r")))

;; (use-package flymake-perlcritic
;;   ;:mode "\\.pl\\'"
;;   :init (setq flymake-perlcritic-severity 3))

;; (defun init-tide ()
;;   (interactive)
;;   (tide-setup)
;;   (flymake-mode 1)
;;   (eldoc-mode 1)
;;   (tide-hl-identifier-mode 1))

;; (use-package tide
;;   :init (progn
;;           (add-hook 'before-save-hook 'tide-format-before-save)
;;           (add-hook 'typescript-mode-hook #'init-tide)))
#+end_src

**** Lisp

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

(use-package paredit
  :config (progn
            (add-hook 'lisp-mode-hook 'enable-paredit-mode)
            (add-hook 'scheme-mode-hook 'enable-paredit-mode)
            (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)))

(use-package clojure-mode
  :init (add-hook 'clojure-mode-hook 'enable-paredit-mode))

(use-package clj-refactor
  :diminish clj-refactor-mode
  :init (add-hook 'clojure-mode-hook 'clj-refactor-mode)
  :config (cljr-add-keybindings-with-prefix "C-c ."))

(use-package cider
  :config (setq cider-repl-result-prefix ";; => ")
  :init (progn
          (add-hook 'cider-repl-mode-hook 'enable-paredit-mode)
          (add-hook 'cider-mode-hook #'eldoc-mode)))
#+end_src

**** Misc

#+begin_src emacs-lisp
(use-package ivy
  :config (progn (ivy-mode 1)
                 (use-package counsel
                   :ensure t)
                 (global-set-key (kbd "M-x") 'counsel-M-x)
                 (global-set-key (kbd "C-x C-f") 'counsel-find-file)))

(use-package ledger-mode
  :init (setq
         ledger-mode-should-check-version nil
         ledger-mode-report-links-in-register nil
         ledger-binary-path "hledger"))

(use-package org-ref
  :init (setq
         org-ref-completion-library 'org-ref-ivy-cite
         ;org-ref-default-citation-link "autocite")
         org-ref-default-citation-link "citep"))

(use-package org-bullets
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(defalias 'perl-mode 'cperl-mode)
#+end_src

**** Vim

#+begin_src emacs-lisp
(use-package evil
  :config (progn (evil-mode t)
                 ;; We have dd to delete line, and I don't use C-j so make sensible pageup and down
                 (define-key evil-normal-state-map (kbd "C-j") (lambda ()
                                                                 (interactive)
                                                                 (evil-scroll-down nil)))
                 (define-key evil-normal-state-map (kbd "C-k") (lambda ()
                                                                 (interactive)
                                                                 (evil-scroll-up nil)))

                 (defun avoid-stupid-emacs-state () (lambda () (interactive) (message "Call evil-emacs-state if you REALLY want to start it.")))

                 (define-key evil-normal-state-map (kbd "C-z") (avoid-stupid-emacs-state))
                 (define-key evil-insert-state-map (kbd "C-z") (avoid-stupid-emacs-state))))

(use-package evil-surround
  :config (global-evil-surround-mode 1))

(use-package org-evil) ; not to be confused with evil-org
#+end_src

**** Theming

#+begin_src emacs-lisp
;; (use-package apropospriate-theme
;;   :init (progn
;;           (load-theme 'apropospriate-dark t)))

(use-package atom-dark-theme
  :init (load-theme 'atom-dark t))
#+end_src

**** Org

Some helper functions to get nice agenda-views:

#+begin_src emacs-lisp
(defun my-dayn-of-week ()
  "Get the numeric representation of the current day. Mon = 0, Sun = 7"
  (string-to-number (format-time-string "%u")))

(defun my-+weekday-remainder (days)
  "Get the number of days plus the rest-of-the-week. Defaults to a week."
  (let* ((day (my-dayn-of-week))
         (remain (- 7 day)))
    (+ (or days 7) remain)))
#+end_src

And the rest of the settings:

#+begin_src emacs-lisp
;; in order to execute sh source blocks in org files.
(require 'ob-sh)
(require 'ox-odt)

;; Org-mode related hooks
(add-hook 'org-mode-hook (lambda () (org-indent-mode)))
(add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))
(add-hook 'prog-mode-hook (lambda () (visual-line-mode 0)))
(add-hook 'latex-mode-hook (lambda () (visual-line-mode 1)))

(setq org-log-done t
      org-edit-src-content-indentation 0
      org-default-notes-file (concat org-directory "/organiser.org")
      org-src-window-setup 'current-window
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-deadline-warning-days 18
      ;org-html-preamble nil
      org-html-postamble nil
      org-html-head-extra "<link rel=\"stylesheet\" href=\"./style.css\" />"
      org-latex-logfiles-extensions '("lof" "lot" "tex" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"))

(defun my-org-css-include-hook (exporter)
  (when (eq exporter 'html)
    (shell-command "cp ~/org/style.css .")))

(add-hook 'org-export-before-processing-hook 'my-org-css-include-hook)

(add-to-list 'org-modules 'org-habit)

(add-to-list 'org-agenda-files (expand-file-name "~/org/"))

;; stuff done at stupid o'clock counts as 23:59 the previous night
(setq org-use-effective-time t)

(setq org-capture-templates
      '(("t" "Tasks" entry
         (file+headline "~/org/organiser.org" "Organiser")
         "** TODO %^{Task}
%?")

        ("a" "Appointment" entry
         (file "./appointments.org" "Appointments")
         "** TODO %^{Task}
Booked %<%Y-%m-%d %H:%M>
%?")

        ("i" "Idea" entry
         (file "./ideas.org" "Ideas")
         "* IDEA %?")))

(setq org-agenda-custom-commands
      '(("g" "This fortnight" agenda ""
         ((org-agenda-span (my-+weekday-remainder 14))))
        ("m" "Next 28-ish Days" agenda ""
         ((org-agenda-span (my-+weekday-remainder 28))))))

(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(("frame" "none")
        ("linenos" "false")
        ("breaklines" "true")
        ("resetmargins" "true")
        ("fontsize=\\footnotesize")))

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq org-tag-alist '(("learning" . ?l)
                      ("fun" . ?f)
                      ("health" . ?h)
                      ("job" ?j)))

(org-babel-do-load-languages 'org-babel-load-languages
                             '((plantuml . t)
                               (dot . t)
                               (python . t)
                               (js . t)
                               ;(html . t)
                               ))

(setq org-plantuml-jar-path
      (expand-file-name "~/jars/plantuml.jar"))
#+end_src

*** Fonts

I can't really make up my mind what my preferred font is, but at the moment it's Fira Mono.
It can be downloaded from Fira's [[https://github.com/mozilla/Fira][GitHub repo]] in the /ttf folder, but some Linux distributions have it in their repos.

Other fonts I like include (in no particular order) Inconsolata, Consolas, Droid Sans Mono, Ubuntu Mono.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Fira Mono"
                    :height 110 
                    :weight 'normal
                    :width 'normal)
#+end_src

*** Executables

Sometimes we use Emacs on a computer that may not have certain binaries installed;
this section is for the configuration of those sorts of things, based on the existence
of those binaries.

#+begin_src emacs-lisp
(when (executable-find "pandoc")
  (setq markdown-command "pandoc -f markdown -t html"))
#+end_src

** Code

Create a code header from the current line. Usage: call =my-comment-header= on the line you want
to turn into a header.

#+begin_src emacs-lisp
(defun my-edit-dotemacs ()
  "Just open up my emacs config file."
  (interactive)
  (find-file "~/.emacs.d/daniel.org"))

(defun indent-buffer ()
  "Indent the entire buffer."
  (interactive)
  (indent-region (point-min) (point-max)))
#+end_src

** Keybindings

Some keybindings are not in this section because they're with their relative =use-package=
section. Keeps the bindings with their package so they're easily found and changed/deleted.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-d") 'delete-trailing-whitespace)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c r") 'org-capture)
(global-set-key (kbd "C-c l") 'org-insert-link)

;; these shouldnt be global.
(global-set-key (kbd "C-c C-,") 'org-promote-subtree)
(global-set-key (kbd "C-c C-.") 'org-demote-subtree)

(global-unset-key (kbd "C-z"))

(global-set-key (kbd "C-c e") 'my-edit-dotemacs)
#+end_src

** Emacs Settings

General, built-in settings for Emacs.

#+begin_src emacs-lisp
;; no scrollbars, toolbars or menubars
(dolist (mode '(menu-bar-mode scroll-bar-mode tool-bar-mode))
  (when (fboundp mode) (funcall mode -1)))

;; Vimmy scrolling
(setq scroll-margin 8
      scroll-step 1
      scroll-conservatively 101)

;; no wrap
(setq-default truncate-lines t)

;; indentation
(setq-default indent-tabs-mode nil
							tab-width 4)

;; show matching parentheses
(show-paren-mode 1)
(setq show-paren-style 'expression)

;; cursor settings
(global-hl-line-mode)

;; font lock
(global-font-lock-mode 1)

;; disable the splash screen
(setq inhibit-splash-screen t)

(setq-default tab-width 2)

;; display line numbers only when programming
(setq linum-format " %d")
(add-hook 'prog-mode-hook (lambda () (linum-mode 1)))

;; fix minor annoyances
(fset 'yes-or-no-p 'y-or-n-p)
(setq confirm-nonexistent-file-or-buffer nil)

;; re-enabled commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; set the window title to the buffer name
(when window-system
  (setq frame-title-format "Emacs: %b"))

;; don't litter my filesystem with backup files (via emacswiki)
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.saves"))
      delete-old-versions t
      kept-new-versions 4
      kept-old-versions 2
      version-control t)
#+end_src
