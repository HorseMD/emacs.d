#+TITLE: Emacs Configuration File
#+OPTIONS: toc:2

* Configuration

Essentially this file takes the place of my original =init.el= file. That file is now only
used to load /this/ file, via =org-babel-load-file=.

** Setup

*** Add directories

I like to keep a directory in =~/.emacs.d= to throw things in to be put in Emacs's load path.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/autoload")
#+end_src

*** Add package sources

#+begin_src emacs-lisp
;; add the repos
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))

(package-initialize)
#+end_src

** Custom Packages

Let's use use-package!

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src

*** Install

Turns out =use-package= isn't needed at runtime:

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))
#+end_src

With =use-package=, we can easily and cleanly organise and configure plugins. First a few packages
that require no configuration (other than maybe an ensure):

#+begin_src emacs-lisp
(use-package json-mode)
(use-package yaml-mode)
(use-package markdown-mode)
(use-package diminish :ensure t)
#+end_src

And then everything else:

#+begin_src emacs-lisp
(use-package hydra
  :ensure t)
(use-package web-mode
  :ensure t
  :init (progn
          (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))))
(use-package js2-mode
  :ensure t
  :init (progn
          (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
          (font-lock-add-keywords 'js2-mode
                                  `(("\\(function *\\)("
                                     (0 (progn
                                          (compose-region (match-beginning 1) (match-end 1) "\u0192"))))))))
(use-package flycheck
  :ensure
  :init (add-hook 'prog-mode-hook 'flycheck-mode)
  :config (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
(use-package zencoding-mode
  :init (add-hook 'sgml-mode-hook 'zencoding-mode))
(use-package expand-region
  :init (global-set-key (kbd "C-=") 'er/expand-region))
(use-package smart-mode-line
  :config (progn
            (setq sml/no-confirm-load-theme t)
            (setq sml/theme 'respectful)
            (sml/setup)
            (add-to-list 'sml/replacer-regexp-list '("^~/dotfiles/" ":dotfiles:") t)))
(use-package git-gutter-fringe
  :config (progn
            (global-git-gutter-mode 1)
(use-package org-indent                 ; indent text to level of headings 
  :diminish org-indent-mode
  :config (setq org-startup-indented t))
           (setq git-gutter:modified-sign "~")))
#+end_src

Lisp stuff:

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
(use-package paredit
  :init (progn
          (add-hook 'lisp-mode-hook 'enable-paredit-mode)
          (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)))
(use-package lispy
  :disabled t
  :config (progn
          (add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))
          (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))))
(use-package clojure-mode
  :init (add-hook 'clojure-mode-hook 'enable-paredit-mode))
(use-package cider
  :config (setq cider-repl-result-prefix ";; => ")
  :init (progn
          (add-hook 'cider-repl-mode-hook 'paredit-mode)
          (add-hook 'cider-mode-hook #'eldoc-mode)))
#+end_src

Vim-convert stuff:

#+begin_src emacs-lisp
(use-package evil
  :config (evil-mode t))
(use-package vimish-fold
  :init (progn
          (vimish-fold-global-mode 1)
          (global-set-key (kbd "C-c f")
                          (defhydra hydra-fold (:color blue)
                            "folding"
                            ("c" vimish-fold "create")
                            ("t" vimish-fold-toggle "toggle") 
                            ("d" vimish-fold-delete "delete")
                            ("q" nil "quit")))))
#+end_src

My theme tastes change regularly enough to warrant keeping configuration for old ones:

#+begin_src emacs-lisp
(use-package zenburn
  :disabled t
  :ensure zenburn-theme
  :init (progn
          (load-theme 'zenburn 'no-confirm)
          (set-background-color "#282828")
          (set-face-attribute 'region nil :background "#c6d4c5" :foreground "#444")))

(use-package leuven-theme
  :disabled t
  :init (progn
          (load-theme 'leuven 'noconfirm)
          (set-face-attribute 'org-level-1 nil :height 130)
          (set-face-attribute 'org-document-title nil :height 140)))

(use-package sanityinc-tomorrow-eighties
  :init (load-theme 'sanityinc-tomorrow-eighties 'no-confirm))
#+end_src

*** Misc

Misc settings that should probably be somewhere else:

#+begin_src emacs-lisp
(ido-mode t)

(setq org-log-done t)
(setq org-agenda-files '("g:/Documents/org/agenda.org"))
(setq org-edit-src-content-indentation 0)

(setq org-tag-alist '(("LEARN" . ?l)
                      ("UNIVERSITY" . ?u)
                      ("URGENT" . ?U)
                      ("PROJECT" . ?p)
                      ("MONEY" . ?$)))

(setq nrepl-log-messages t)

(font-lock-add-keywords 'emacs-lisp-mode
  '(("(\\(lambda\\)\\>" (0 (prog1 ()
                             (compose-region (match-beginning 1)
                                             (match-end 1)
                                             "\u03BB"))))))
#+end_src

*** Fonts

I can't really make up my mind what my preferred font is, but at the moment it's Fira Mono.
It can be downloaded from Fira's [[https://github.com/mozilla/Fira][GitHub repo]] in the /ttf folder.

Other fonts I like include (in no particular order) Inconsolata, Consolas, Droid Sans Mono, Ubuntu Mono.

[[http://larsenwork.com/monoid/][Monoid]] seems cool, if a little edgy.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Fira Mono"
                    :height 105 :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :family "Droid Sans"
                    :height 105 :weight 'medium)
#+end_src

*** Executables

Sometimes we use Emacs on a computer that may not have certain binaries installed;
this section is for the configuration of those sorts of things, based on the existence
of those binaries.

#+begin_src emacs-lisp
;; git clone https://github.com/slime/slime.git ~/.emacs.d/git/slime/
(when (executable-find "clisp")
  (add-to-list 'load-path "~/.emacs.d/git/slime")
  (require 'slime-autoloads)
  (setq inferior-lisp-program (executable-find "clisp"))
  (setq slime-contribs '(slime-fancy)))

(when (executable-find "pandoc")
  (setq markdown-command "pandoc -f markdown -t html"))
#+end_src
** Code

Create a code header from the current line. Usage: call =my-comment-header= on the line you want
to turn into a header.

#+begin_src emacs-lisp
(defvar my-column-limiter 80)
(defvar my-spacer-character ?_)

(defun my-comment-header ()
  "Comment a line and turn it into something resembling a header."
  (interactive)
  (save-excursion
    (move-beginning-of-line nil)
    (set-mark-command nil)
    (move-end-of-line nil)
    (call-interactively 'comment-dwim)
    (let*
        ((comment-start-len (- (region-end) (region-beginning)))
         (spacer-count (- (+ 1 my-column-limiter) comment-start-len)))
      (insert-char my-spacer-character spacer-count))))

(defun my-edit-dotemacs ()
  "Just open up my emacs config file."
  (interactive)
  (find-file "~/.emacs.d/daniel.org"))
#+end_src

** Keybindings

Some keybindings are not in this section because they're with their relative =use-package=
section. Keeps the bindings with their package so they're easily found and changed/deleted.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-d") 'delete-trailing-whitespace)
(global-set-key (kbd "C-c C-a") 'org-agenda)
(global-set-key (kbd "C-c C-,") 'org-promote-subtree)
(global-set-key (kbd "C-c C-.") 'org-demote-subtree)

(global-unset-key (kbd "C-z"))

(global-set-key (kbd "C-c h") 'my-comment-header)
(global-set-key (kbd "C-c e") 'my-edit-dotemacs)
#+end_src
** Emacs Settings

General, built-in settings for Emacs.

#+begin_src emacs-lisp
;; no scrollbars, toolbars or menubars
(dolist (mode '(menu-bar-mode scroll-bar-mode tool-bar-mode))
  (when (fboundp mode) (funcall mode -1)))

;; no wrap
(setq-default truncate-lines t)

;; show matching parentheses
(show-paren-mode 1)
(setq show-paren-style 'expression)

;; cursor settings
(global-hl-line-mode)

;; font lock
(global-font-lock-mode 1)

;; disable the splash screen
(setq inhibit-splash-screen t)

;; use spaces, not tabs!
(setq-default indent-tabs-mode nil)
(setq tab-width 4)

;; display line numbers only when programming
(add-hook 'prog-mode-hook (lambda () (linum-mode 1)))

;; fix minor annoyances
(fset 'yes-or-no-p 'y-or-n-p)
(setq confirm-nonexistent-file-or-buffer nil)

;; re-enabled commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; set the window title to the buffer name
(when window-system
  (setq frame-title-format "Emacs: %b"))

;; don't litter my filesystem with backup files (via emacswiki)
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.saves"))
      delete-old-versions t
      kept-new-versions 4
      kept-old-versions 2
      version-control t)
#+end_src
