#+TITLE: Emacs Configuration File

* Configuration

Essentially this file takes the place of my original =init.el= file. That file is now only
used to load /this/ file, via =org-babel-load-file=.

** Setup
*** Add directories

I like to keep a directory in =~/.emacs.d= to throw things in to be put in Emacs's load path.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/autoload")
#+end_src

*** Add package sources

Most packages we use are on melpa:

#+begin_src emacs-lisp
;; add the repos
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))

(package-initialize)
#+end_src

** Custom Packages
*** Setup

Let's use use-package!

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src

Just in case we're from the past, let's prefer UTF-8 before we do anything else.

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

*** Install

With =use-package=, we can easily and cleanly organise and configure plugins. First a few packages
that require no configuration (other than maybe an ensure):

#+begin_src emacs-lisp
(use-package json-mode      :ensure t)
(use-package diminish       :ensure t)
(use-package magit          :ensure t)
#+end_src

**** Basic

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :ensure t
  :diminish git-gutter-mode
  :config (global-git-gutter-mode 1))

(use-package edbi
  ;; cpan RPC::EPC::Service DBI DBD::SQLite DBD::mysql
  :disabled t)
(use-package edbi-sqlite
  :disabled t)

(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config (which-key-mode))

(use-package company
  :ensure t
  :init (add-hook 'prog-mode-hook 'company-mode))

(use-package yasnippet
  :ensure t
  :init (yas-global-mode 1))

(use-package projectile
  :ensure t)
(use-package neotree
  :ensure t
  :bind ([f12] . neotree-toggle)
  :init (setq
         neo-theme (if window-system 'icons 'arrow)
         neo-smart-open t)
  :config (progn (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-enter)
                 (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
                 (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)))

(use-package lua-mode
  :ensure t
  :mode "\\.lua\\'")
#+end_src

**** Webdev

#+begin_src emacs-lisp
(use-package zencoding-mode
  :disabled t
  :init (add-hook 'sgml-mode-hook 'zencoding-mode))

(use-package web-mode
  :ensure t
  :mode "\\.html\\'")

;; holy moly nice js completion
;; make sure you install tern via npm (npm install -g tern)
(use-package tern
  :ensure t
  :config (add-hook 'js2-mode-hook (lambda () (tern-mode 1))))

(use-package company-tern
  :ensure tern
  :init (add-to-list 'company-backends 'company-tern))

(use-package js2-mode
  :ensure t
  :mode "\\.js\\'"
  :init (progn
          (setq js2-highlight-level 3)
          (font-lock-add-keywords 'js2-mode
                                  `(("\\(function *\\)("
                                     (0 (progn
                                          (compose-region (match-beginning 1) (match-end 1) "\u0192")))))))
  :config (setq tab-width 4))                           ; cursive f symbol

(use-package js2-refactor
  :ensure t
  :config (progn
            (add-hook 'js2-mode-hook #'js2-refactor-mode)
            (js2r-add-keybindings-with-prefix "C-c r")))

(use-package flymake
  :ensure t)

(use-package flymake-perlcritic
  :ensure t
  ;:mode "\\.pl\\'"
  :init (setq flymake-perlcritic-severity 3))
#+end_src

**** Lisp

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

(use-package paredit
  :ensure t 
  :config (progn
            (add-hook 'lisp-mode-hook 'enable-paredit-mode)
            (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)))

(use-package clojure-mode
  :init (add-hook 'clojure-mode-hook 'enable-paredit-mode))

(use-package clj-refactor
  :ensure t
  :diminish clj-refactor-mode
  :init (add-hook 'clojure-mode-hook 'clj-refactor-mode)
  :config (cljr-add-keybindings-with-prefix "C-c ."))

(use-package cider
  :ensure t
  :config (setq cider-repl-result-prefix ";; => ")
  :init (progn
          (add-hook 'cider-repl-mode-hook 'enable-paredit-mode)
          (add-hook 'cider-mode-hook #'eldoc-mode)))
#+end_src

**** Misc

#+begin_src emacs-lisp
(use-package smart-tabs-mode
  ;; use tabs for indentation, spaces for alignment.
  :ensure t
  :init (setq-default indent-tabs-mode nil)
  :config (progn
            (add-hook 'prog-mode-hook (lambda () (setq indent-tabs-mode t)))
            (smart-tabs-insinuate 'javascript)))

(use-package ivy
  :ensure t
  :config (progn (ivy-mode 1)
                 (use-package counsel
                   :ensure t)
                 (global-set-key (kbd "M-x") 'counsel-M-x)
                 (global-set-key (kbd "C-x C-f") 'counsel-find-file)))

(use-package whitespace
  :init (setq whitespace-display-mappings
              '((newline-mark ?\n    [?¬ ?\n] [?$ ?\n])
                (space-mark   ?\     [?·]     [?.])
                (space-mark   ?\xA0  [?¤]     [?_]))
              whitespace-style '(face trailing tabs spaces newline
                                      indentation::tab indentation::space indentation
                                      space-mark tab-mark newline-mark))
  :config (global-whitespace-mode t))

(use-package elfeed)
(use-package elfeed-goodies
	:config (elfeed-goodies/setup))
(use-package elfeed-org
  :config (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/org/elfeed.org")))
#+end_src

**** Vim

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :config (progn (evil-mode t)
                 ;; We have dd to delete line, and I don't use C-j so make sensible pageup and down
                 (define-key evil-normal-state-map (kbd "C-j") (lambda ()
                                                                 (interactive)
                                                                 (evil-scroll-down nil)))
                 (define-key evil-normal-state-map (kbd "C-k") (lambda ()
                                                                 (interactive)
                                                                 (evil-scroll-up nil)))
                 (evil-set-initial-state 'elfeed-show-mode 'normal)
                 (evil-set-initial-state 'elfeed-search-mode 'emacs)))

(use-package evil-surround
  :ensure t
  :config (global-evil-surround-mode 1))

(use-package org-evil
  ; not to be confused with evil-org
  :ensure t)
#+end_src

**** Theme

My theme tastes change regularly enough to warrant keeping configuration for old ones:

#+begin_src emacs-lisp
(use-package zenburn
  :disabled t
  :ensure zenburn-theme
  :init (progn
          (load-theme 'zenburn 'no-confirm)
          (set-background-color "#282828")
          (set-face-attribute 'region nil :background "#c6d4c5" :foreground "#444")))

(use-package sanityinc-tomorrow-eighties
  :disabled t
  :init (load-theme 'sanityinc-tomorrow-eighties 'no-confirm))

(use-package moe-theme
  :ensure t
  :config (progn (moe-theme-set-color 'magenta)
                 (moe-light)
                 (use-package powerline
                   :ensure t
                   :config (progn
                             (powerline-moe-theme)
                             ;; call powerline-moe-theme to set the colours to fit with our theme.
                             (powerline-center-evil-theme)
                             (display-time-mode t)))))

(use-package all-the-icons
  ;; be sure to download and install the fonts from https://github.com/domtronn/all-the-icons.el
  :ensure t)
#+end_src

**** Org

Some helper functions to get nice agenda-views:

#+begin_src emacs-lisp
(defun my-dayn-of-week ()
	"Get the numeric representation of the current day. Mon = 0, Sun = 7"
	(let ((day (string-to-number (format-time-string "%u"))))
		day))

(defun my-+weekday-remainder (days)
	"Get the number of days plus the rest-of-the-week. Defaults to a week."
	(let* ((day (my-dayn-of-week))
				 (remain (- 7 day)))
		(+ (or days 7) remain)))
#+end_src

And the rest of the settings:

#+begin_src emacs-lisp
;; in order to execute sh source blocks in org files.
(require 'ob-sh)

;; Org-mode related hooks
(add-hook 'org-mode-hook (lambda () (visual-line-mode t)))
(add-hook 'org-mode-hook (lambda () (org-indent-mode)))

(setq org-log-done t
      org-edit-src-content-indentation 0
      org-default-notes-file (concat org-directory "/organiser.org")
      org-src-window-setup 'current-window
      org-src-fontify-natively t)

(add-to-list 'org-agenda-files (expand-file-name "~/org/"))

;; stuff done at stupid o'clock counts as 23:59 the previous night
(setq org-use-effective-time t)

(setq org-capture-templates
      '(
        ("t" "Tasks" entry
         (file+headline "~/org/organiser.org" "Organiser")
         "** TODO %^{Task}
%?")
        ("a" "Appointment" entry
         (file "./appointments.org" "Appointments")
         "** TODO %^{Task}
Booked %<%Y-%m-%d %H:%M>
%?")

        ("i" "Idea" entry
         (file "./ideas.org" "Ideas")
         "* IDEA %?")))

(setq org-agenda-custom-commands
      '(("g" "This fortnight" agenda ""
				 ((org-agenda-span (my-+weekday-remainder 14))))
				("m" "Next 28-ish Days" agenda ""
				 ((org-agenda-span (my-+weekday-remainder 28))))))

(require 'ox-latex)
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(("frame" "lines") ("linenos=true")))

(setq org-tag-alist '(("LEARN" . ?l)
                      ("UNIVERSITY" . ?u)
                      ("FUN" . ?f)
                      ("PROJECT" . ?p)))

(org-babel-do-load-languages 'org-babel-load-languages
                             '((plantuml . t)
                               (python . t)
                               (js . t)))

(setq org-plantuml-jar-path
      (expand-file-name "~/jars/plantuml.jar"))
#+end_src

*** Misc
Misc settings that should probably be somewhere else:

#+begin_src emacs-lisp
(ido-mode t)

(setq nrepl-log-messages t)

(font-lock-add-keywords 'emacs-lisp-mode
                        '(("(\\(lambda\\)\\>" (0 (prog1 ()
                                              (compose-region (match-beginning 1)
                                                              (match-end 1)
                                                              "\u03BB")))))) ; lambda symbol
#+end_src

*** Perl

#+begin_src emacs-lisp
(defalias 'perl-mode 'cperl-mode)
;; PBP says only use spaces

;; from http://www.perlmonks.org/?node_id=650413

;; (add-to-list 'auto-mode-alist '("\\.\\([pP]\\([Llm]\\|[oO][dD]\\)\\|al
;; +\\)\\'" . cperl-mode))
;; (add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
;; (add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
;; (add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))

(custom-set-variables
  '(cperl-close-paren-offset -4)
  '(cperl-continued-statement-offset 4)
  '(cperl-indent-level 4)
  '(cperl-indent-parens-as-block t)
  '(cperl-tab-always-indent t)
  ;; my changes:
  '(cperl-array-face ((t nil))))
#+end_src

*** Fonts

I can't really make up my mind what my preferred font is, but at the moment it's Fira Mono.
It can be downloaded from Fira's [[https://github.com/mozilla/Fira][GitHub repo]] in the /ttf folder.

Other fonts I like include (in no particular order) Inconsolata, Consolas, Droid Sans Mono, Ubuntu Mono.

[[http://larsenwork.com/monoid/][Monoid]] seems cool, if a little edgy.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 105 :weight 'medium)
(set-face-attribute 'default nil
                    :family "Fira Mono"
                    :height 105 :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :family "Droid Sans"
                    :height 105 :weight 'medium)
#+end_src

*** Executables

Sometimes we use Emacs on a computer that may not have certain binaries installed;
this section is for the configuration of those sorts of things, based on the existence
of those binaries.

#+begin_src emacs-lisp
;; ;; git clone https://github.com/slime/slime.git ~/.emacs.d/git/slime/
;; (when (executable-find "clisp")
;;   (add-to-list 'load-path "~/.emacs.d/git/slime")
;;   (require 'slime-autoloads)
;;   (setq inferior-lisp-program (executable-find "clisp"))
;;   (setq slime-contribs '(slime-fancy)))

(when (executable-find "pandoc")
  (setq markdown-command "pandoc -f markdown -t html"))
#+end_src

** Code

Create a code header from the current line. Usage: call =my-comment-header= on the line you want
to turn into a header.

#+begin_src emacs-lisp
(defvar my-column-limiter 80)
(defvar my-spacer-character ?_)

(defun my-comment-header ()
  "Comment a line and turn it into something resembling a header."
  (interactive)
  (save-excursion
    (move-beginning-of-line nil)
    (set-mark-command nil)
    (move-end-of-line nil)
    (call-interactively 'comment-dwim)
    (let*
        ((comment-start-len (- (region-end) (region-beginning)))
         (spacer-count (- (+ 1 my-column-limiter) comment-start-len)))
      (insert-char my-spacer-character spacer-count))))

(defun my-edit-dotemacs ()
  "Just open up my emacs config file."
  (interactive)
  (find-file "~/.emacs.d/daniel.org"))

(defun indent-buffer ()
  "Indent the entire buffer."
  (interactive)
  (indent-region (point-min) (point-max)))
#+end_src

** Keybindings

Some keybindings are not in this section because they're with their relative =use-package=
section. Keeps the bindings with their package so they're easily found and changed/deleted.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-d") 'delete-trailing-whitespace)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c r") 'org-capture)
(global-set-key (kbd "C-c l") 'org-store-link)

;; these shouldnt be global.
(global-set-key (kbd "C-c C-,") 'org-promote-subtree)
(global-set-key (kbd "C-c C-.") 'org-demote-subtree)

(global-unset-key (kbd "C-z"))

(global-set-key (kbd "C-c h") 'my-comment-header)
(global-set-key (kbd "C-c e") 'my-edit-dotemacs)
#+end_src
** Emacs Settings

General, built-in settings for Emacs.

#+begin_src emacs-lisp
;; no scrollbars, toolbars or menubars
(dolist (mode '(menu-bar-mode scroll-bar-mode tool-bar-mode))
  (when (fboundp mode) (funcall mode -1)))

;; Vimmy scrolling
(setq scroll-margin 8
      scroll-step 1
      scroll-conservatively 101)

;; no wrap
(setq-default truncate-lines t)

;; show matching parentheses
(show-paren-mode 1)
(setq show-paren-style 'expression)

;; cursor settings
(global-hl-line-mode)

;; font lock
(global-font-lock-mode 1)

;; disable the splash screen
(setq inhibit-splash-screen t)

(setq-default tab-width 2)

;; display line numbers only when programming
(add-hook 'prog-mode-hook (lambda () (linum-mode 1)))

;; fix minor annoyances
(fset 'yes-or-no-p 'y-or-n-p)
(setq confirm-nonexistent-file-or-buffer nil)

;; re-enabled commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; set the window title to the buffer name
(when window-system
  (setq frame-title-format "Emacs: %b"))

;; don't litter my filesystem with backup files (via emacswiki)
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.saves"))
      delete-old-versions t
      kept-new-versions 4
      kept-old-versions 2
      version-control t)

;; dont prompt me every time I open symlinks
;; maybe move this to init.el
(setq vc-follow-symlinks t)
#+end_src
