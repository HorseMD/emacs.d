#+TITLE: Emacs Configuration File
#+OPTIONS: toc:2

* Configuration

Essentially this file takes the place of my original =init.el= file. That file is now only
used to load /this/ file, via =org-babel-load-file=.

** Setup

*** Add directories

I like to keep a directory in =~/.emacs.d= to throw things in to be put in Emacs's load path.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/autoload")
#+end_src

*** Add package sources

#+begin_src emacs-lisp
;; add the repos
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))

(package-initialize)
#+end_src

** Custom Packages

Let's use use-package!

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src

*** Install

With =use-package=, we can easily and cleanly organise and configure plugins:

#+begin_src emacs-lisp
(use-package json-mode)
(use-package yaml-mode)
(use-package markdown-mode)

(use-package web-mode
  :ensure t
  :init (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
(use-package js2-mode
  :ensure t
  :init (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))
(use-package rainbow-delimiters
  :ensure t
  :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
(use-package flycheck
  :ensure
  :init (add-hook 'prog-mode-hook 'flycheck-mode))
(use-package zencoding-mode
  :init (add-hook 'sgml-mode-hook 'zencoding-mode))
(use-package paredit
  :init (progn
          (add-hook 'lisp-mode-hook 'enable-paredit-mode)
          (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)))
(use-package clojure-mode
  :init (add-hook 'clojure-mode-hook 'enable-paredit-mode))
(use-package cider
  :config (setq cider-repl-result-prefix ";; => ")
  :init (progn
          (add-hook 'cider-repl-mode-hook 'paredit-mode)
          (add-hook 'cider-mode-hook #'eldoc-mode)))
(use-package smart-mode-line
  :config (progn
            (setq sml/no-confirm-load-theme t)
            (setq sml/theme 'respectful)
            (sml/setup)
            (add-to-list 'sml/replacer-regexp-list '("^~/dotfiles/" ":dotfiles:") t)))
(use-package zenburn
  :ensure zenburn-theme
  :init (progn
          (load-theme 'zenburn 'no-confirm)
          (set-background-color "#282828")))
(use-package git-gutter-fringe
  :config (progn
            (global-git-gutter-mode 1)
            (setq git-gutter:modified-sign "~")))
(use-package dynamic-fonts
  :ensure t
  :config (progn
            (setq dynamic-fonts-preferred-monospace-point-size 11)
            (setq dynamic-fonts-preferred-proportional-point-size 11)
            (setq dynamic-fonts-preferred-monospace-fonts
                  '("Fira Mono"
                    "Inconsolata"
                    "Droid Sans Mono"
                    "Consolas"))
            (setq dynamic-fonts-preferred-proportional-fonts
                  '("Roboto"
                    "Helvetica"
                    "Verdana"
                    "Arial"))
            (dynamic-fonts-setup)))
(use-package evil
  :config (evil-mode t))
#+end_src

*** Load

Load plugins that come built-in to Emacs.

#+begin_src emacs-lisp
(require 'hideshow)
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src

*** Misc

Misc settings that should probably be somewhere else:

#+begin_src emacs-lisp
(ido-mode t)

(setq org-log-done t)
(setq org-agenda-files '("~/Documents/org/agenda"))
(setq org-edit-src-content-indentation 0)

(setq nrepl-log-messages t)
#+end_src

*** Executables

Sometimes we use Emacs on a computer that may not have certain binaries installed;
this section is for the configuration of those sorts of things, based on the existence
of those binaries.

#+begin_src emacs-lisp
;; git clone https://github.com/slime/slime.git ~/.emacs.d/git/slime/
(when (executable-find "clisp")
  (add-to-list 'load-path "~/.emacs.d/git/slime")
  (require 'slime-autoloads)
  (setq inferior-lisp-program (executable-find "clisp"))
  (setq slime-contribs '(slime-fancy)))

(when (executable-find "pandoc")
  (setq markdown-command "pandoc -f markdown -t html"))
#+end_src

*** Keybindings

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-d") 'delete-trailing-whitespace)
(global-set-key (kbd "C-c C-a") 'org-agenda)

(global-unset-key (kbd "C-z"))
#+end_src

** Code

Create a code header from the current line. Usage: call my-comment-header on the line you want
to turn into a header.

#+begin_src emacs-lisp
(defvar my-column-limiter 80)
(defvar my-spacer-character ?_)

(defun my-comment-header ()
  (interactive)
  (save-excursion
    (move-beginning-of-line nil)
    (set-mark-command nil)
    (move-end-of-line nil)
    (call-interactively 'comment-dwim)
    (let*
        ((comment-start-len (- (region-end) (region-beginning)))
         (spacer-count (- (+ 1 my-column-limiter) comment-start-len)))
      (insert-char my-spacer-character spacer-count))))
#+end_src

** Keybindings

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-d") 'delete-trailing-whitespace)
(global-set-key (kbd "C-c C-a") 'org-agenda)

(global-unset-key (kbd "C-z"))

(global-set-key (kbd "C-c h") 'my-comment-header)
#+end_src
** Emacs Settings

General, built-in settings for Emacs.

#+begin_src emacs-lisp
;; no scrollbars, toolbars or menubars
(dolist (mode '(menu-bar-mode scroll-bar-mode tool-bar-mode))
  (when (fboundp mode) (funcall mode -1)))

;; no wrap
(setq-default truncate-lines t)

;; show matching parentheses
(show-paren-mode 1)
(setq show-paren-style 'expression)

;; cursor settings
(global-hl-line-mode)

;; font lock
(global-font-lock-mode 1)

;; disable the splash screen
(setq inhibit-splash-screen t)

;; use spaces, not tabs!
(setq-default indent-tabs-mode nil)
(setq tab-width 4)

;; fix minor annoyances
(fset 'yes-or-no-p 'y-or-n-p)
(setq confirm-nonexistent-file-or-buffer nil)

;; re-enabled commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; set the window title to the buffer name
(when window-system
  (setq frame-title-format "Emacs: %b"))
#+end_src
